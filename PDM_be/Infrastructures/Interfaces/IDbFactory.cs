using System.Data;

namespace PDM_be.Infrastructure.Interfaces
{
    public interface IDbFactory
    {
        // T·∫°o session
        T Create<T>() where T : class, IDbSession;

        // T·∫°o unit of work t·ª´ session
        TUnitOfWork Create<TUnitOfWork, TSession>(
            IsolationLevel isolationLevel = IsolationLevel.RepeatableRead
        )
            where TUnitOfWork : class, IUnitOfWork
            where TSession : class, IDbSession;

        // Gi·∫£i ph√≥ng resource
        void Release(IDisposable instance);
    }
}

// IDbFactory: x√°c ƒë·ªãnh b·∫°n ph·∫£i c√≥ Create<T>(), Create<TUnitOfWork,TSession>(), Release().

// 3. IDbFactory ‚Äì Nh√† m√°y s·∫£n xu·∫•t Session & UnitOfWork

// M·ª•c ƒë√≠ch:

// Chu·∫©n h√≥a c√°ch t·∫°o ra Session v√† UnitOfWork.

// Tr√°nh ƒë·ªÉ service ho·∫∑c repository t·ª± t·∫°o connection/transaction ‚Üí d·ªÖ sai, kh√≥ test.

// Cho ph√©p Dependency Injection (inject IDbFactory v√†o service ‚Üí g·ªçi Create<T>() khi c·∫ßn).

// üëâ N√≥i d·ªÖ hi·ªÉu: IDbFactory gi·ªëng nh∆∞ c√°i m√°y ATM:

// B·∫°n mu·ªën r√∫t ti·ªÅn (Session) ‚Üí Create<T>().

// B·∫°n mu·ªën th·ª±c hi·ªán giao d·ªãch c√≥ ki·ªÉm so√°t (UnitOfWork) ‚Üí Create<TUnitOfWork, TSession>().

// Khi xong th√¨ Release() ƒë·ªÉ ƒë√≥ng k·∫øt n·ªëi.

// N√≥ ch·ªâ n√≥i: ‚Äúb·∫•t k·ª≥ DbSession n√†o c≈©ng ph·∫£i c√≥ Connection, SqlDialect, UnitOfWork() v√† Dispose()‚Äù.

// Kh√¥ng quan t√¢m b·∫°n d√πng Npgsql, SQL Server hay fake connection.